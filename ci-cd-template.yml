# COPY THIS FILE TO .github/workflows/ci.yml MANUALLY
# GitHub Apps require 'workflows' permission to create/update workflow files

name: Protein Operators CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC

env:
  PYTHON_VERSION: '3.10'
  PYTORCH_VERSION: '2.0.0'
  CACHE_VERSION: v1

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/torch
        key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ env.CACHE_VERSION }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-py${{ matrix.python-version }}-${{ env.CACHE_VERSION }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,experiments]"
    
    - name: Code formatting check (Black)
      run: |
        black --check --diff src tests
    
    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff src tests
    
    - name: Linting (Flake8)
      run: |
        flake8 src tests --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Type checking (MyPy)
      run: |
        mypy src --ignore-missing-imports
    
    - name: Security scanning (Bandit)
      run: |
        pip install bandit
        bandit -r src -f json -o bandit-report.json
    
    - name: Dependency vulnerability scan
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
    
    - name: Unit tests
      run: |
        pytest tests/unit -v --cov=protein_operators --cov-report=xml --cov-report=html
    
    - name: Integration tests
      run: |
        pytest tests/integration -v --timeout=300
    
    - name: Performance tests
      run: |
        pytest tests/performance -v --benchmark-only --benchmark-json=benchmark-results.json
    
    - name: Test coverage check
      run: |
        coverage report --fail-under=85
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-py${{ matrix.python-version }}
        path: |
          htmlcov/
          bandit-report.json
          safety-report.json
          benchmark-results.json
          pytest-report.xml

  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build --target development -t protein-operators:dev .
        docker build --target production -t protein-operators:prod .
    
    - name: Test Docker image
      run: |
        docker run --rm protein-operators:dev python -c "import protein_operators; print('✅ Import successful')"
        docker run --rm protein-operators:dev pytest tests/unit --maxfail=1 -q
    
    - name: Security scan Docker image
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $PWD:/path \
          aquasec/trivy image --exit-code 1 --severity HIGH,CRITICAL protein-operators:prod

  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,experiments]"
        pip install pytest-benchmark
    
    - name: Run performance benchmarks
      run: |
        pytest tests/benchmarks -v --benchmark-json=benchmark-results.json
    
    - name: Performance regression check
      run: |
        python tests/scripts/performance_regression.py benchmark-results.json
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.json

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run Semgrep security scan
      run: |
        pip install semgrep
        semgrep --config=auto --json --output=semgrep-results.json src/
    
    - name: Dependency license check
      run: |
        pip install pip-licenses
        pip-licenses --format=json --output-file=license-report.json
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
    
    - name: Upload security artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          semgrep-results.json
          license-report.json

  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: [quality-gates, docker-build, performance-benchmarks, security-audit]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.quality-gates.result == 'success' }}
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "✅ Protein Operators CI/CD pipeline completed successfully"
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify on failure
      if: ${{ needs.quality-gates.result == 'failure' }}
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "❌ Protein Operators CI/CD pipeline failed"
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}