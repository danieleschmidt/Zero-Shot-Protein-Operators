apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: protein-operators
data:
  prometheus.yaml: |-
    {
        "apiVersion": 1,
        "datasources": [
            {
               "access":"proxy",
                "editable": true,
                "name": "prometheus",
                "orgId": 1,
                "type": "prometheus",
                "url": "http://prometheus:9090",
                "version": 1
            }
        ]
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: protein-operators
data:
  dashboards.yaml: |-
    {
        "apiVersion": 1,
        "providers": [
            {
                "folder": "Protein Operators",
                "name": "protein-operators",
                "options": {
                    "path": "/var/lib/grafana/dashboards/protein-operators"
                },
                "orgId": 1,
                "type": "file"
            }
        ]
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: protein-operators-dashboard
  namespace: protein-operators
data:
  protein-operators.json: |-
    {
      "dashboard": {
        "id": null,
        "title": "Protein Operators Dashboard",
        "tags": ["protein-operators"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(protein_design_requests_total[5m])",
                "legendFormat": "Requests/sec"
              }
            ],
            "xAxis": {"show": true},
            "yAxes": [
              {"label": "requests/sec", "show": true}
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(protein_design_duration_seconds_bucket[5m]))",
                "legendFormat": "95th percentile"
              },
              {
                "expr": "histogram_quantile(0.50, rate(protein_design_duration_seconds_bucket[5m]))",
                "legendFormat": "50th percentile"
              }
            ],
            "yAxes": [
              {"label": "seconds", "show": true}
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Active Pods",
            "type": "singlestat",
            "targets": [
              {
                "expr": "count(up{job=\"protein-operators\"} == 1)",
                "legendFormat": "Active Pods"
              }
            ],
            "gridPos": {"h": 4, "w": 6, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "process_resident_memory_bytes{job=\"protein-operators\"}",
                "legendFormat": "Memory Usage"
              }
            ],
            "yAxes": [
              {"label": "bytes", "show": true}
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 12}
          },
          {
            "id": 5,
            "title": "CPU Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(process_cpu_seconds_total{job=\"protein-operators\"}[5m])",
                "legendFormat": "CPU Usage"
              }
            ],
            "yAxes": [
              {"label": "cores", "show": true}
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 12}
          },
          {
            "id": 6,
            "title": "Error Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(protein_design_errors_total[5m])",
                "legendFormat": "Errors/sec"
              }
            ],
            "yAxes": [
              {"label": "errors/sec", "show": true}
            ],
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 20}
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "5s"
      }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: protein-operators
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        supplementalGroups:
          - 0
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        ports:
        - containerPort: 3000
          name: http-grafana
          protocol: TCP
        env:
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: grafana-admin
              key: username
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-admin
              key: password
        - name: GF_INSTALL_PLUGINS
          value: "grafana-clock-panel,grafana-simple-json-datasource"
        resources:
          limits:
            memory: "1Gi"
            cpu: "500m"
          requests:
            memory: "512Mi"
            cpu: "250m"
        volumeMounts:
        - mountPath: /var/lib/grafana
          name: grafana-pv
        - mountPath: /etc/grafana/provisioning/datasources
          name: grafana-datasources
          readOnly: false
        - mountPath: /etc/grafana/provisioning/dashboards
          name: grafana-dashboards-config
          readOnly: false
        - mountPath: /var/lib/grafana/dashboards/protein-operators
          name: grafana-dashboards
          readOnly: false
      volumes:
      - name: grafana-pv
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-datasources
        configMap:
          defaultMode: 420
          name: grafana-datasources
      - name: grafana-dashboards-config
        configMap:
          defaultMode: 420
          name: grafana-dashboards-config
      - name: grafana-dashboards
        configMap:
          defaultMode: 420
          name: protein-operators-dashboard

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: protein-operators
  labels:
    app: grafana
spec:
  type: ClusterIP
  ports:
  - port: 3000
    protocol: TCP
    targetPort: http-grafana
  selector:
    app: grafana

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: protein-operators
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp3

---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-admin
  namespace: protein-operators
type: Opaque
data:
  username: YWRtaW4=  # admin
  password: cGFzc3dvcmQ=  # password (change this!)